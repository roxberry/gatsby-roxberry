{"version":3,"file":"component---src-templates-tags-js-fccc9363ae97eb74aed1.js","mappings":"uLAqIA,UA3Ha,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKK,MAAOL,IACZ,+BACA,0BAAI,gBAAC,IAAD,CAAiBM,KAAM,CAAC,MAAO,UAAnC,KAA2DF,GAC3D,uBAAKG,UAAU,WACdL,EAAMM,KAAI,WAAWC,GAAO,IAAfC,EAAc,EAAdA,KAENC,EAAYD,EAAKE,YAAYC,UAEnC,OACE,uBAAKC,IAAKJ,EAAKK,OAAOC,KAAOP,EAAEQ,YAC7B,gBAAC,KAAD,CAAMC,GAAIR,EAAKK,OAAOC,MAEhBL,GAAaA,EAAUQ,KACnB,gBAAC,EAAAC,EAAD,CACAC,MAAOV,EAAUQ,IAAIG,gBAAgBC,gBACrCC,IAAKb,EAAUa,IACfC,OAAO,cAIf,+BACE,0BAAKf,EAAKE,YAAYP,OACtB,uBAAKE,UAAU,cAAf,aAAuCG,EAAKE,YAAYc,MACxD,yBAAIhB,EAAKE,YAAYe","sources":["webpack://roxberry.dev/./src/templates/tags.js"],"sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO title={tag} />\n      <section>\n      <h1><FontAwesomeIcon icon={['fas', 'tags']} />&nbsp;&nbsp;{tagHeader}</h1>\n      <div className=\"flexbox\">\n      {edges.map(({ node }, i) => {\n\n        const postImage = node.frontmatter.postimage\n\n        return (\n          <div key={node.fields.slug + i.toString()}>\n            <Link to={node.fields.slug}>\n              {\n                  postImage && postImage.src &&  (\n                      <GatsbyImage\n                      image={postImage.src.childImageSharp.gatsbyImageData}\n                      alt={postImage.alt}\n                      layout=\"fullWidth\"\n                      />\n                  )\n              }\n              <section>\n                <h3>{node.frontmatter.title}</h3>\n                <div className=\"postedInfo\">posted on {node.frontmatter.date}</div>\n                <p>{node.frontmatter.excerpt}</p>\n              </section>\n            </Link>\n          </div> \n        ) \n        }) }\n      </div>\n      {/* <ul>\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul> */}\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      {/* <Link to=\"/tags\">All tags</Link> */}\n      </section>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport const query = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          frontmatter {\n              title\n              subtitle\n              date(formatString: \"LL\")\n              author\n              excerpt\n              featured\n              postimage\n              {\n                alt\n                src {\n                  absolutePath\n                  childImageSharp {\n                      gatsbyImageData(\n                        layout: FULL_WIDTH\n                        placeholder: BLURRED\n                        formats: [AUTO, WEBP, AVIF]\n                      )\n                  }\n                }\n              }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\nexport default Tags\n"],"names":["pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","title","icon","className","map","i","node","postImage","frontmatter","postimage","key","fields","slug","toString","to","src","G","image","childImageSharp","gatsbyImageData","alt","layout","date","excerpt"],"sourceRoot":""}