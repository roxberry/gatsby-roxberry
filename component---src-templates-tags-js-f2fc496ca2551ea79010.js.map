{"version":3,"file":"component---src-templates-tags-js-f2fc496ca2551ea79010.js","mappings":"kJAKA,SAASA,EAAT,GAA8E,IAA/DC,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,KAAaC,EAA8B,EAArCC,MAAkBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvDC,GAASC,EAAAA,EAAAA,IAAe,cAAxBD,KAgBFE,EAAkBT,GAAeO,EAAKG,aAAaV,YACnDI,EACJD,GAAaA,EAAUQ,IAAvB,GACOJ,EAAKG,aAAaE,QAAUT,EAAUQ,IACzC,KACAE,EAAYP,EAAQ,GAAMC,EAAKG,aAAaE,QAAUN,EAAa,KAEzE,OACE,gBAAC,IAAD,CACEQ,eAAgB,CACdb,KAAAA,GAEFI,MAAOA,EACPU,cAAa,QAAUR,EAAKG,aAAaL,MACzCW,KACEH,EACI,CACE,CACEI,IAAK,YACLC,KAAML,IAGV,GAENX,KAAM,CACJ,CACEiB,KAAK,cACLC,QAASX,GAEX,CACEU,KAAM,WACNC,QAASb,EAAKG,aAAaW,SAASC,KAAK,MAE3C,CACEC,SAAS,WACTH,QAASf,GAEX,CACEkB,SAAS,iBACTH,QAASX,GAEX,CACEc,SAAS,UACTH,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASb,EAAKG,aAAac,QAE7B,CACEL,KAAK,gBACLC,QAASf,GAEX,CACEc,KAAK,sBACLC,QAASX,IAGVgB,OACCtB,EACI,CACE,CACEoB,SAAU,WACVH,QAAShB,GAEX,CACEmB,SAAU,iBACVH,QAASjB,EAAUuB,OAErB,CACEH,SAAU,kBACVH,QAASjB,EAAUwB,QAErB,CACER,KAAM,eACNC,QAAS,wBAGb,CACE,CACED,KAAM,eACNC,QAAS,aAIlBK,OAAOvB,KAKhBH,EAAI6B,aAAe,CACjB3B,KAAK,KACLC,KAAM,GACNF,YAAY,IAgBd,O,gECpHA,IAXgB,SAAC,GAAc,IAAZ6B,EAAW,EAAXA,KAEf,OADAC,QAAQC,IAAIF,GAERA,EAAKG,KAAI,SAACC,EAAKC,GACP,IAAIC,EAAU,SAAWC,GAAAA,CAAUH,GACnC,OAAO,4BAAQC,EAAI,KAAO,GAAI,qBAAGhB,KAAMiB,EAASE,IAAKH,GAAMD,S,oGC8H3E,UA5Ha,SAAC,GAA2B,IAAzBK,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjBN,EAAQK,EAARL,IACR,EAA8BM,EAAKC,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SAAuC,IAAfA,EAAmB,GAAK,KAAhD,iBACMT,EADN,IAGf,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAK5B,MAAO4B,IACZ,+BACI,0BAAI,gBAAC,IAAD,CAAiBW,KAAM,CAAC,MAAO,UAAnC,KAA2DD,GAC3D,uBAAKE,UAAU,WACVJ,EAAMT,KAAI,WAAWE,GAAO,IAAfY,EAAc,EAAdA,KAEJC,EAAYD,EAAKE,YAAYC,UAEnC,OACI,uBAAKZ,IAAKS,EAAKI,OAAOC,KAAOjB,EAAEkB,YAC3B,gBAAC,KAAD,CAAMC,GAAIP,EAAKI,OAAOC,MAAM,sBAAIN,UAAU,aAAaC,EAAKE,YAAY3C,QACxE,uBAAKwC,UAAU,cAAf,aAAuCC,EAAKE,YAAYM,KAAxD,cAAwE,gBAAC,IAAD,CAASzB,KAAQiB,EAAKE,YAAYnB,OAA1G,MACA,gBAAC,KAAD,CAAMwB,GAAIP,EAAKI,OAAOC,MAEdJ,GAAaA,EAAUpC,KACnB,gBAAC,EAAA4C,EAAD,CACInD,MAAO2C,EAAUpC,IAAI6C,gBAAgBC,gBACrCC,IAAKX,EAAUW,IACfC,OAAO,eAMnB,+BACI,yBAAIb,EAAKE,YAAYY","sources":["webpack://roxberry.dev/./src/components/SEO.jsx","webpack://roxberry.dev/./src/components/TagList.jsx","webpack://roxberry.dev/./src/templates/tags.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, image: metaImage, title, pathname }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            keywords\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: \"keywords\",\n          content: site.siteMetadata.keywords.join(\",\"),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          metaImage\n            ? [\n                {\n                  property: \"og:image\",\n                  content: image,\n                },\n                {\n                  property: \"og:image:width\",\n                  content: metaImage.width,\n                },\n                {\n                  property: \"og:image:height\",\n                  content: metaImage.height,\n                },\n                {\n                  name: \"twitter:card\",\n                  content: \"summary_large_image\",\n                },\n              ]\n            : [\n                {\n                  name: \"twitter:card\",\n                  content: \"summary\",\n                },\n              ]\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst TagList = ({ tags }) => {\n    console.log(tags);\n    return (\n        tags.map((tag, i) => {\n                let tagLink = \"/tags/\" + kebabCase(tag);\n                return <span>{(i ? ', ' : '')}<a href={tagLink} key={i} >{ tag }</a></span>\n            }\n        )\n    )\n}\n\nexport default TagList","import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport TagList from \"../components/TagList\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n    const { tag } = pageContext\n    const { edges, totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"\n        } tagged with \"${tag}\"`\n\n    return (\n        <Layout>\n            <SEO title={tag} />\n            <section>\n                <h1><FontAwesomeIcon icon={['fas', 'tags']} />&nbsp;&nbsp;{tagHeader}</h1>\n                <div className=\"flexbox\">\n                    {edges.map(({ node }, i) => {\n\n                        const postImage = node.frontmatter.postimage\n\n                        return (\n                            <div key={node.fields.slug + i.toString()}>\n                                <Link to={node.fields.slug}><h1 className=\"postTitle\">{node.frontmatter.title}</h1></Link>\n                                <div className=\"postedInfo\">posted on {node.frontmatter.date} | tags: [ <TagList tags= { node.frontmatter.tags } /> ]</div>\n                                <Link to={node.fields.slug}>\n                                    {\n                                        postImage && postImage.src && (\n                                            <GatsbyImage\n                                                image={postImage.src.childImageSharp.gatsbyImageData}\n                                                alt={postImage.alt}\n                                                layout=\"fullWidth\"\n                                            />\n                                        )\n                                    }\n                                </Link>\n\n                                    <section>\n                                        <p>{node.frontmatter.excerpt}</p>\n                                    </section>\n                            </div>\n                        )\n                    })}\n                </div>\n                {/* <ul>\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul> */}\n                {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n                {/* <Link to=\"/tags\">All tags</Link> */}\n            </section>\n        </Layout>\n    )\n}\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                        fields: PropTypes.shape({\n                            slug: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport const query = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          frontmatter {\n              title\n              subtitle\n              date(formatString: \"LL\")\n              author\n              excerpt\n              featured\n              tags\n              postimage\n              {\n                alt\n                src {\n                  absolutePath\n                  childImageSharp {\n                      gatsbyImageData(\n                        layout: FULL_WIDTH\n                        placeholder: BLURRED\n                        formats: [AUTO, WEBP, AVIF]\n                      )\n                  }\n                }\n              }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\nexport default Tags\n"],"names":["SEO","description","lang","meta","metaImage","image","title","pathname","site","useStaticQuery","metaDescription","siteMetadata","src","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","href","name","content","keywords","join","property","author","concat","width","height","defaultProps","tags","console","log","map","tag","i","tagLink","kebabCase","key","pageContext","data","allMarkdownRemark","edges","totalCount","tagHeader","icon","className","node","postImage","frontmatter","postimage","fields","slug","toString","to","date","G","childImageSharp","gatsbyImageData","alt","layout","excerpt"],"sourceRoot":""}