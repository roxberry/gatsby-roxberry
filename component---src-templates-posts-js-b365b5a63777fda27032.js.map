{"version":3,"file":"component---src-templates-posts-js-b365b5a63777fda27032.js","mappings":"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","sources":["webpack://roxberry.dev/./src/components/SEO.jsx","webpack://roxberry.dev/./src/components/TagList.jsx","webpack://roxberry.dev/./src/components/Pager.jsx","webpack://roxberry.dev/./src/templates/posts.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, image: metaImage, title, pathname }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            keywords\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: \"keywords\",\n          content: site.siteMetadata.keywords.join(\",\"),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          metaImage\n            ? [\n                {\n                  property: \"og:image\",\n                  content: image,\n                },\n                {\n                  property: \"og:image:width\",\n                  content: metaImage.width,\n                },\n                {\n                  property: \"og:image:height\",\n                  content: metaImage.height,\n                },\n                {\n                  name: \"twitter:card\",\n                  content: \"summary_large_image\",\n                },\n              ]\n            : [\n                {\n                  name: \"twitter:card\",\n                  content: \"summary\",\n                },\n              ]\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst TagList = ({ tags }) => {\n    console.log(tags);\n    return (\n        tags.map((tag, i) => {\n                let tagLink = \"/tags/\" + kebabCase(tag);\n                return <span>{(i ? ', ' : '')}<a href={tagLink} key={i} >{ tag }</a></span>\n            }\n        )\n    )\n}\n\nexport default TagList","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Pager = ({isFirst, isLast, prevPage, nextPage, currentPage, numPages}) => {\n\n    return (\n        <ul className='post-pager'\n            style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            alignItems: 'center',\n            listStyle: 'none',\n            paddingInlineStart: 0,\n          }}>\n          {!isFirst && (\n            <Link to={prevPage} rel=\"prev\" style={{marginRight: 20}}>\n              ← Previous Page\n            </Link>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n            <li\n              key={`pagination-number${i + 1}`}\n              style={{\n                margin: 20,\n              }}\n            >\n              <Link\n                to={`/${i === 0 ? \"\" : i + 1}`}\n                style={{\n                  textDecoration: \"none\",\n                  color: i + 1 === currentPage ? \"#ffffff\" : \"\",\n                  background: i + 1 === currentPage ? \"#007acc\" : \"\",\n                }}\n              >\n                {i + 1}\n              </Link>\n            </li>\n          ))}\n          {!isLast && (\n            <Link to={nextPage} rel=\"next\" style={{marginLeft: 20}}>\n              Next Page →\n            </Link>\n          )}\n        </ul>\n    )\n}\n\nexport default Pager","import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport Pager from \"../components/Pager\"\nimport TagList from \"../components/TagList\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { Link, graphql } from \"gatsby\"\n\nclass BlogIndex extends React.Component {\n    render() {\n        const { data } = this.props\n        const siteTitle = data.site.siteMetadata.title\n        const posts = data.allMarkdownRemark.edges\n        const { currentPage, numPages } = this.props.pageContext\n        const isFirst = currentPage === 1\n        const isLast = currentPage === numPages\n        const prevPage = currentPage - 1 === 1 ? \"/\" : \"/\" + (currentPage - 1).toString()\n        const nextPage = \"/\" + (currentPage + 1).toString()\n\n        return (\n            <Layout location={this.props.location} title={siteTitle}>\n                <SEO title=\"Welcome!\" />\n                {/* <section>\n                    <h1>Welcome!</h1>\n                    <p>\n                    </p>\n                </section> */}\n                <section>\n                    <h1 className=\"sectionTitle\">Latest Posts</h1>\n                    <div className=\"flexbox\">\n                        {data.allMarkdownRemark.edges.map((edge, i) => {\n                            const postImage = edge.node.frontmatter.postimage\n\n                            return (\n                                <div\n                                    key={edge.node.fields.slug + i.toString()}\n                                    className=\"post\"\n                                >\n                                    <Link to={edge.node.fields.slug}>\n                                        <h1 className=\"postTitle\">{edge.node.frontmatter.title}</h1>\n                                    </Link>\n                                        <div className=\"postedInfo\">\n                                            posted on {edge.node.frontmatter.date} | tags: [ <TagList tags= { edge.node.frontmatter.tags } /> ]\n                                        </div>\n                                        <Link to={edge.node.fields.slug}>\n\n                                        {postImage && postImage.src && (\n                                            <GatsbyImage\n                                                image={postImage.src.childImageSharp.gatsbyImageData}\n                                                alt={postImage.alt}\n                                                layout=\"fullWidth\"\n                                            />\n                                        )}\n                                                                            </Link>\n\n                                        <div className=\"postExcerpt\">\n                                            <p>{edge.node.frontmatter.excerpt}</p>\n                                        </div>\n                                </div>\n                            )\n                        })}\n\n                        <Pager\n                            isFirst={isFirst}\n                            isLast={isLast}\n                            prevPage={prevPage}\n                            nextPage={nextPage}\n                            currentPage={currentPage}\n                            numPages={numPages} />\n\n                    </div>\n                </section>\n            </Layout>\n        )\n    }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { featured: { eq: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          frontmatter {\n            title\n            subtitle\n            date(formatString: \"LL\")\n            author\n            excerpt\n            featured\n            tags\n            postimage {\n              alt\n              src {\n                absolutePath\n                childImageSharp {\n                  gatsbyImageData(\n                    layout: FULL_WIDTH\n                    placeholder: BLURRED\n                    formats: [AUTO, WEBP, AVIF]\n                  )\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["SEO","description","lang","meta","metaImage","image","title","pathname","site","useStaticQuery","metaDescription","siteMetadata","src","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","href","name","content","keywords","join","property","author","concat","width","height","defaultProps","tags","console","log","map","tag","i","tagLink","kebabCase","key","isFirst","isLast","prevPage","nextPage","currentPage","numPages","className","style","display","flexWrap","alignItems","listStyle","paddingInlineStart","to","marginRight","Array","from","length","_","margin","textDecoration","color","background","marginLeft","BlogIndex","render","data","this","props","siteTitle","allMarkdownRemark","edges","pageContext","toString","Layout","location","edge","postImage","node","frontmatter","postimage","fields","slug","date","TagList","G","childImageSharp","gatsbyImageData","alt","layout","excerpt","React"],"sourceRoot":""}